@function strip-units($number) {
 @return $number / ($number * 0 + 1);
}

// increases margin-bottom if font size is greater than 20px
@function double-size($fontSize, $marginNumber) {
 @if strip-units($fontSize) > 20 {
  @return $marginNumber * 1;
 } @else {
  @return $marginNumber;
 }
}

@function basefont-to-pixel($baseFS) {
 // see http://pxtoem.com/
 @if $baseFS == 37.5% {
  @return 6;
 } @else if $baseFS == 43.8% {
  @return 7;
 } @else if $baseFS == 50% {
  @return 8;
 } @else if $baseFS == 56.3% {
  @return 9;
 } @else if $baseFS == 62.5% {
  @return 10;
 } @else if $baseFS == 68.8% {
  @return 11;
 } @else if $baseFS == 75% {
  @return 12;
 } @else if $baseFS == 81.3% {
  @return 13;
 } @else if $baseFS == 87.5% {
  @return 14;
 } @else if $baseFS == 93.8% {
  @return 15;
 } @else if $baseFS == 100% {
  @return 16;
 }

}

///
/// Add `$unit` to `$value`
///
/// @param {Number} $value - Value to add unit to
/// @param {String} $unit - String representation of the unit
///
/// @return {Number} - `$value` expressed in `$unit`
///
@function to-length($value, $unit) {
 $units: ('px': 1px, 'cm': 1cm, 'mm': 1mm, '%': 1%, 'ch': 1ch, 'pc': 1pc, 'in': 1in, 'em': 1em, 'rem': 1rem, 'pt': 1pt, 'ex': 1ex, 'vw': 1vw, 'vh': 1vh, 'vmin': 1vmin, 'vmax': 1vmax);

 @if not index(map-keys($units), $unit) {
  $_: log('Invalid unit `#{$unit}`.');
 }

 @return $value * map-get($units, $unit);
}

///
/// Casts a string into a number
///
/// @param {String | Number} $value - Value to be parsed
///
/// @return {Number}
///
@function to-number($value) {
 @if type-of($value) == 'number' {
  @return $value;
 } @else if type-of($value) != 'string' {
  $_: log('Value for `to-number` should be a number or a string.');
 }

 $result: 0;
 $digits: 0;
 $minus: str-slice($value, 1, 1) == '-';
 $numbers: ('0': 0, '1': 1, '2': 2, '3': 3, '4': 4, '5': 5, '6': 6, '7': 7, '8': 8, '9': 9);

 @for $i from if($minus, 2, 1) through str-length($value) {
  $character: str-slice($value, $i, $i);

  @if not (index(map-keys($numbers), $character) or $character == '.') {
   @return to-length(if($minus, -$result, $result), str-slice($value, $i));
  }

  @if $character == '.' {
   $digits: 1;
  } @else if $digits == 0 {
   $result: $result * 10 + map-get($numbers, $character);
  } @else {
   $digits: $digits * 10;
   $result: $result + map-get($numbers, $character) / $digits;
  }
 }

 @return if($minus, -$result, $result);
}

// removes unit from end of number
// or converts string to number removing unit at the end
@function strip-unit($number) {
 @if type-of($number) == 'number' and not unitless($number) {
  @return $number / ($number * 0 + 1);
 }

 @if type-of($number) == 'string' {
  @return to-number(str_slice($number, 1, (str_length($number) - 1)));
 }

 @return $number;
}

@function reduceNumber($number) {
 @return (strip-unit($number) / 100);
}